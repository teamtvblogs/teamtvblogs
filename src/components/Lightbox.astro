---
---

<link href="https://cdn.jsdelivr.net/npm/photoswipe@5.3.8/dist/photoswipe.css" rel="stylesheet">

<script>
  import PhotoSwipe from 'photoswipe';
  import type { PhotoSwipeItem, PhotoSwipeOptions } from '../types/photoswipe';

  const initPhotoSwipe = async () => {
    try {
      const images = document.querySelectorAll('a[data-pswp]');
      const videos = document.querySelectorAll('video.video-player');
      
      // Convert videos to lightbox items
      const videoItems: PhotoSwipeItem[] = Array.from(videos).map(video => {
        const width = parseInt(video.getAttribute('width') || '0');
        const height = parseInt(video.getAttribute('height') || '0');
        
        return {
          element: video,
          html: `<video 
            controls 
            class="pswp__video"
            playsinline
            preload="none"
            width="${width}"
            height="${height}"
            style="width: ${width}px; height: ${height}px;"
          >
            <source src="${video.querySelector('source')?.src}" type="video/mp4">
          </video>`,
          width,
          height,
          caption: video.closest('.video-container')?.querySelector('.video-comment')?.textContent || ''
        };
      });

      // Convert images to lightbox items
      const imageItems: PhotoSwipeItem[] = Array.from(images).map(img => ({
        src: img.getAttribute('href') || '',
        width: parseInt(img.getAttribute('data-width') || '0'),
        height: parseInt(img.getAttribute('data-height') || '0'),
        alt: img.getAttribute('data-caption') || '',
        caption: img.getAttribute('data-caption') || ''
      }));

      // Combine all items
      const allItems: PhotoSwipeItem[] = [...imageItems, ...videoItems];

      // Add click handlers to both images and videos
      [...images, ...videos].forEach((item, index) => {
        item.addEventListener('click', (e) => {
          e.preventDefault();
          
          const pswp = new PhotoSwipe({
            dataSource: allItems,
            index,
            bgOpacity: 0.9,
            padding: { top: 20, bottom: 20, left: 20, right: 20 }
          } as PhotoSwipeOptions);

          // Register custom caption element
          pswp.on('uiRegister', () => {
            pswp.ui?.registerElement({
              name: 'custom-caption',
              order: 9,
              isButton: false,
              appendTo: 'wrapper',
              html: 'Caption text',
              onInit: (el) => {
                el.style.position = 'absolute';
                el.style.bottom = '20px';
                el.style.left = '50%';
                el.style.transform = 'translateX(-50%)';
                el.style.zIndex = '1500';
                el.style.background = 'rgba(0, 0, 0, 0.8)';
                el.style.padding = '8px 16px';
                el.style.borderRadius = '4px';
                el.style.maxWidth = '80%';
                
                pswp.on('change', () => {
                  const caption = pswp.currSlide?.data?.caption;
                  if (caption) {
                    el.innerHTML = caption;
                  }
                });
              }
            });
          });

          // Handle video cleanup
          let prevVideo: HTMLVideoElement | null = null;
          pswp.on('change', () => {
            // Pause and hide previous video if it exists
            if (prevVideo instanceof HTMLVideoElement) {
              prevVideo.pause();
              prevVideo.style.display = 'none';
            }
            
            // Get and show current video if exists
            const currSlideContent = pswp.currSlide?.content?.element;
            if (currSlideContent) {
              const videoElement = currSlideContent.querySelector('video');
              if (videoElement instanceof HTMLVideoElement) {
                prevVideo = videoElement;
                videoElement.style.display = 'block';
              }
            }
          });

          pswp.init();
        });
      });

    } catch (error) {
      console.error('PhotoSwipe initialization error:', error);
    }
  };

  // Wait for DOM to be ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initPhotoSwipe);
  } else {
    initPhotoSwipe();
  }
</script>

<style>
  .pswp__custom-caption {
    color: #fff;
    font-size: 16px;
    line-height: 1.5;
    text-align: center;
    margin: 0 auto;
    white-space: normal;
    display: inline-block;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
  }

  .pswp__custom-caption {
    opacity: 0;
    transition: opacity 0.3s ease;
  }
  .pswp__custom-caption:not(:empty) {
    opacity: 1;
  }

  .pswp__content {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .pswp__video {
    position: relative;
    width: auto !important;
    height: auto !important;
    max-width: 90vw;
    max-height: 80vh;
    margin: auto;
  }

  /* Prevent size changes on control appearance */
  .pswp__video::-webkit-media-controls-panel {
    display: flex !important;
    opacity: 1 !important;
  }
</style>

<!-- PhotoSwipe container -->
<div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="pswp__bg"></div>
  <div class="pswp__scroll-wrap">
    <div class="pswp__container">
      <div class="pswp__item"></div>
      <div class="pswp__item"></div>
      <div class="pswp__item"></div>
    </div>
    <div class="pswp__ui pswp__ui--hidden">
      <div class="pswp__top-bar">
        <div class="pswp__counter"></div>
        <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>
        <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>
      </div>
    </div>
  </div>
</div>