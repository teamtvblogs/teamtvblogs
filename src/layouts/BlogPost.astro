---
import type { CollectionEntry } from "astro:content";

import BlogHero from "@/components/blog/Hero.astro";
import TOC from "@/components/blog/TOC.astro";
import WebMentions from "@/components/blog/webmentions/index.astro";
import Lightbox from '../components/Lightbox.astro';
console.log('BlogPost layout is importing BlogVideo');

import BaseLayout from "./Base.astro";
import BaseHead from '../components/BaseHead.astro';

const { frontmatter } = Astro.props;

interface Props {
	post: CollectionEntry<"post">;
}

const { post } = Astro.props;
const {
	data: { description, ogImage, publishDate, title, updatedDate },
	slug,
} = post;
const socialImage = ogImage ?? `/og-image/${slug}.png`;
const articleDate = updatedDate?.toISOString() ?? publishDate.toISOString();
const { headings } = await post.render();
---

<BaseLayout meta={{ articleDate, description, ogImage: socialImage, title }}>
	<div class="gap-x-10 lg:flex lg:items-start">
		{!!headings.length && <TOC headings={headings} />}
		<article class="flex-grow break-words" data-pagefind-body>
			<div id="blog-hero"><BlogHero content={post} /></div>
			<div
				class="prose prose-sm prose-cactus mt-12 prose-headings:font-semibold prose-headings:text-accent-2 prose-headings:before:absolute prose-headings:before:-ms-4 prose-headings:before:text-accent prose-headings:before:content-['#'] prose-th:before:content-none"
			>
				<slot />
				<WebMentions />
			</div>
		</article>
	</div>
	<button
		aria-label="Back to Top"
		class="z-90 fixed bottom-8 end-4 flex h-10 w-10 translate-y-28 items-center justify-center rounded-full border-2 border-transparent bg-zinc-200 text-3xl opacity-0 transition-all duration-300 hover:border-zinc-400 data-[show=true]:translate-y-0 data-[show=true]:opacity-100 dark:bg-zinc-700 sm:end-8 sm:h-12 sm:w-12"
		data-show="false"
		id="to-top-btn"
		><svg
			aria-hidden="true"
			class="h-6 w-6"
			fill="none"
			focusable="false"
			stroke="currentColor"
			stroke-width="2"
			viewBox="0 0 24 24"
			xmlns="http://www.w3.org/2000/svg"
		>
			<path d="M4.5 15.75l7.5-7.5 7.5 7.5" stroke-linecap="round" stroke-linejoin="round"></path>
		</svg>
	</button>
	<Lightbox />
</BaseLayout>

<script>
	const scrollBtn = document.getElementById("to-top-btn") as HTMLButtonElement;
	const targetHeader = document.getElementById("blog-hero") as HTMLDivElement;

	function callback(entries: IntersectionObserverEntry[]) {
		entries.forEach((entry) => {
			// only show the scroll to top button when the heading is out of view
			scrollBtn.dataset.show = (!entry.isIntersecting).toString();
		});
	}

	scrollBtn.addEventListener("click", () => {
		document.documentElement.scrollTo({ behavior: "smooth", top: 0 });
	});

	const observer = new IntersectionObserver(callback);
	observer.observe(targetHeader);
</script>

<script>
	import PhotoSwipe from 'photoswipe';

	document.addEventListener('DOMContentLoaded', () => {
		const articleImages = document.querySelectorAll('article img');
		
		// Initialize array with placeholder objects for all images
		const galleryItems = new Array(articleImages.length).fill(null);
		
		articleImages.forEach((img, index) => {
			// Create wrapper if not already wrapped
			if (img.parentElement.tagName !== 'A') {
				const wrapper = document.createElement('a');
				wrapper.href = img.src;
				wrapper.style.cursor = 'zoom-in';
				
				// Wrap the image
				img.parentNode.insertBefore(wrapper, img);
				wrapper.appendChild(img);
				
				// Initialize gallery item immediately with loaded or current dimensions
				galleryItems[index] = {
					src: img.src,
					width: img.naturalWidth || img.width,
					height: img.naturalHeight || img.height,
					alt: img.alt
				};
				
				// Update dimensions once the image fully loads
				img.onload = () => {
					galleryItems[index] = {
						src: img.src,
						width: img.naturalWidth,
						height: img.naturalHeight,
						alt: img.alt
					};
				};
				
				// Add click handler
				wrapper.onclick = (e) => {
					e.preventDefault();
					
					// Make sure all images are in the gallery
					articleImages.forEach((img2, idx) => {
						if (!galleryItems[idx]) {
							galleryItems[idx] = {
								src: img2.src,
								width: img2.naturalWidth || img2.width,
								height: img2.naturalHeight || img2.height,
								alt: img2.alt
							};
						}
					});
					
					const pswp = new PhotoSwipe({
						dataSource: galleryItems,
						index: index,
						bgOpacity: 0.9,
						showHideOpacity: true,
						wheelToZoom: true,
						padding: { top: 20, bottom: 20, left: 20, right: 20 },
						imageClickAction: 'zoom',
						fit: 'contain',
						allowPanToNext: true
					});

					pswp.init();
				};
			}
		});
	});
</script>
